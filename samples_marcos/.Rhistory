togeno[togeno==""] <- "+"
rm(parents)
# Chunk 7
togeno <- mutate(togeno, Tut4 = paste(Tut4.x, Tut4.y, sep=","))
togeno <- mutate(togeno, Tut7 = paste(Tut7.x, Tut7.y, sep=","))
togeno <- mutate(togeno, S8   = paste(S8.x,   S8.y, sep=","))
togeno <- mutate(togeno, ZP3  = paste(ZP3.x,  ZP3.y, sep=","))
togeno <- togeno %>% select(Animal.ID, Tut4, Tut7, S8, ZP3, geno)
# Chunk 8
togeno$ID   <- lapply(togeno$Animal.ID, function(x) as.numeric(unlist(strsplit(x, "//"))[2]))
togeno$ID   <- unlist(togeno$ID)
old_geno$ID <- lapply(old_geno$Animal.ID, function(x) as.numeric(unlist(strsplit(x, "//"))[2]))
old_geno$ID <- unlist(old_geno$ID)
colony$ID   <- lapply(colony$Animal.ID, function(x) as.numeric(unlist(strsplit(x, "//"))[2]))
colony$ID   <- unlist(colony$ID)
# Chunk 9
togeno          <- left_join(togeno, select(colony, Breeding.line, S, Animal.ID, DoB))
# Chunk 10
ignore <- c(82:86,348:352)
colony    <- subset(colony, !ID %in% ignore)
old_geno  <- subset(old_geno, !ID %in% ignore)
togeno    <- subset(togeno, !ID %in% ignore)
rm(ignore)
# Chunk 11
samples <- togeno %>% group_by(Tut4, Tut7, S8, ZP3, DoB) %>% arrange(ID) %>% filter(row_number()==1 | row_number()==n())
samples <- samples[,c("ID", "Breeding.line")]
# Chunk 12
S8        <- unique(bind_rows(samples,
setdiff(
subset(togeno, S8 == "pos,+" | S8 == "+,pos"                    )[,c("ID", "Breeding.line")],
subset(colony, S8 != "todo"  & S8 != "Undefined" & IsDead == 0  )[,c("ID", "Breeding.line")]
)
)) %>% arrange(ID)
S8$row    <- (0:(nrow(S8)-1) %/% 8) + 1
S8$primer <- rep("S8", nrow(S8))
# Chunk 13
ZP3        <- unique(bind_rows(samples,
setdiff(
subset(togeno, ZP3 == "+,pos" | ZP3 == "pos,+"                   )[,c("ID", "Breeding.line")],
subset(colony, ZP3 != "todo"  & ZP3 != "Undefined" & IsDead == 0 )[,c("ID", "Breeding.line")]
)
)) %>% arrange(ID)
ZP3$row    <- (0:(nrow(ZP3)-1) %/% 8) + 1
ZP3$primer <- rep("ZP3", nrow(ZP3))
# Chunk 14
Tut7        <- unique(bind_rows(samples,
setdiff(
subset(togeno, str_count(Tut7, ",") > 1)[,c("ID", "Breeding.line")],
subset(colony, Tut7 != "todo" & IsDead == 0)[,c("ID", "Breeding.line")]
)
)) %>% arrange(ID)
Tut7$row    <- (0:(nrow(Tut7)-1) %/% 8) + 1
Tut7$primer <- rep("Tut7", nrow(Tut7))
# Chunk 15
Tut4        <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("\\+", Tut4) & geno == "new")[,c("ID", "Breeding.line")]
old_Tut4    <- subset(colony, Tut4 != "todo" & IsDead == 0)[,c("ID", "Breeding.line")]
need_Tut4   <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("\\+", Tut4) & geno == "old")[,c("ID", "Breeding.line")]
old_Tut4    <- left_join(need_Tut4, old_Tut4)
Tut4        <- unique(bind_rows(samples, setdiff(Tut4, old_Tut4)  )) %>% arrange(ID)
Tut4$row    <- (0:(nrow(Tut4)-1) %/% 8) + 1
Tut4$primer <- rep("Tut4", nrow(Tut4))
rm(need_Tut4, old_Tut4)
# Chunk 16
Tuit        <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("AAD", Tut4) & geno == "new")[,c("ID", "Breeding.line")]
old_Tuit    <- subset(colony, Tut4 != "todo" & IsDead == 0)[,c("ID", "Breeding.line")]
need_Tuit   <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("AAD", Tut4) & geno == "old")[,c("ID", "Breeding.line")]
old_Tuit    <- left_join(need_Tuit, old_Tuit)
Tuit        <- unique(bind_rows(samples, setdiff(Tuit, old_Tuit) )) %>% arrange(ID)
Tuit$row    <- (0:(nrow(Tuit)-1) %/% 8) + 1
Tuit$primer <- rep("Tuit", nrow(Tuit))
rm(need_Tuit, old_Tuit)
# Chunk 17
geno_table  <- bind_rows(S8, Tut4, Tut7, Tuit, ZP3)
geno_table$line   <- (0:(nrow(geno_table)-1) %/% 20) + 1
geno_table$pos    <- (0:(nrow(geno_table)-1)) - (0:(nrow(geno_table)-1) %/% 20) * 20 + 1 + ((0:(nrow(geno_table)-1) %/% 20) %% 2) * 0.5
geno_table  <- geno_table %>% select(ID, row, primer, line, pos, Breeding.line)
rm(Tuit, Tut4, Tut7, ZP3, S8, samples)
# Chunk 18
geno_animal <- unique(geno_table[,c("ID", "Breeding.line")])
geno_animal <- anti_join(geno_animal, old_geno, by="ID") %>% arrange(ID)
# Chunk 19
select(subset(togeno, !ID %in% ignore), Tut4, Tut7, S8, ZP3, ID, Breeding.line, S, geno)
# Chunk 20
subset(subset(colony, !ID %in% ignore), short == "todo" & IsDead == 0) %>% select(Tut4, Tut7, S8, ZP3, ID, Breeding.line, S)
# Chunk 21
as.data.frame(geno_animal)
# Chunk 22
as.data.frame(geno_table)
# Chunk 23
p <- ggplot(geno_table %>% mutate(id_primer = paste(ID, primer, row, sep="_")) %>% select(id_primer, line, pos),
aes(line, pos, label = id_primer))
#Making the plot
p <- p + geom_text(size=2) + theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
text = element_text(size=10))
show(p)
ggsave("gel_loading.pdf", p)
# Chunk 24
rm(togeno, geno_table, geno_animal, colony, p, old_geno)
# Chunk 1
library(dplyr)
library(knitr)
library(stringr)
library(ggplot2)
# Chunk 2
rm(list=ls())
# Chunk 3
colony  <- read.csv("../views/colony.csv" , sep = ";", header = TRUE, stringsAsFactors=FALSE)
# Chunk 4
nine_weeks_ago     <- Sys.Date() - 9*7
# Chunk 5
new_geno  <- subset(colony, DoB > nine_weeks_ago
& short == "Undefined"
& S != "u"
& IsDead == 0) %>%
select(Animal.ID, Sire, Dam) %>% mutate(geno = "new")
old_geno  <- subset(colony, short == "todo"
& IsDead == 0) %>%
select(Animal.ID, Sire, Dam) %>% mutate(geno = "old")
togeno  <- bind_rows(new_geno, old_geno)
rm(nine_weeks_ago, new_geno)
# Chunk 6
parents <- select(colony, Animal.ID, Tut4, Tut7, S8, ZP3)
togeno  <- left_join(togeno, parents, by = c("Sire" = "Animal.ID"))
togeno  <- left_join(togeno, parents, by = c("Dam" = "Animal.ID"))
togeno[togeno==""] <- "+"
rm(parents)
# Chunk 7
togeno <- mutate(togeno, Tut4 = paste(Tut4.x, Tut4.y, sep=","))
togeno <- mutate(togeno, Tut7 = paste(Tut7.x, Tut7.y, sep=","))
togeno <- mutate(togeno, S8   = paste(S8.x,   S8.y, sep=","))
togeno <- mutate(togeno, ZP3  = paste(ZP3.x,  ZP3.y, sep=","))
togeno <- togeno %>% select(Animal.ID, Tut4, Tut7, S8, ZP3, geno)
# Chunk 8
togeno$ID   <- lapply(togeno$Animal.ID, function(x) as.numeric(unlist(strsplit(x, "//"))[2]))
togeno$ID   <- unlist(togeno$ID)
old_geno$ID <- lapply(old_geno$Animal.ID, function(x) as.numeric(unlist(strsplit(x, "//"))[2]))
old_geno$ID <- unlist(old_geno$ID)
colony$ID   <- lapply(colony$Animal.ID, function(x) as.numeric(unlist(strsplit(x, "//"))[2]))
colony$ID   <- unlist(colony$ID)
# Chunk 9
togeno          <- left_join(togeno, select(colony, Breeding.line, S, Animal.ID, DoB))
# Chunk 10
ignore <- c(82:86,348:352)
colony    <- subset(colony, !ID %in% ignore)
old_geno  <- subset(old_geno, !ID %in% ignore)
togeno    <- subset(togeno, !ID %in% ignore)
rm(ignore)
# Chunk 11
samples <- togeno %>% group_by(Tut4, Tut7, S8, ZP3, DoB) %>% arrange(ID) %>% filter(row_number()==1 | row_number()==n())
samples <- samples[,c("ID", "Breeding.line")]
# Chunk 12
S8        <- unique(bind_rows(samples,
setdiff(
subset(togeno, S8 == "pos,+" | S8 == "+,pos"                    )[,c("ID", "Breeding.line")],
subset(colony, S8 != "todo"  & S8 != "Undefined" & IsDead == 0  )[,c("ID", "Breeding.line")]
)
)) %>% arrange(ID)
S8$row    <- (0:(nrow(S8)-1) %/% 8) + 1
S8$primer <- rep("S8", nrow(S8))
# Chunk 13
ZP3        <- unique(bind_rows(samples,
setdiff(
subset(togeno, ZP3 == "+,pos" | ZP3 == "pos,+"                   )[,c("ID", "Breeding.line")],
subset(colony, ZP3 != "todo"  & ZP3 != "Undefined" & IsDead == 0 )[,c("ID", "Breeding.line")]
)
)) %>% arrange(ID)
ZP3$row    <- (0:(nrow(ZP3)-1) %/% 8) + 1
ZP3$primer <- rep("ZP3", nrow(ZP3))
# Chunk 14
Tut7        <- unique(bind_rows(samples,
setdiff(
subset(togeno, str_count(Tut7, ",") > 1)[,c("ID", "Breeding.line")],
subset(colony, Tut7 != "todo" & IsDead == 0)[,c("ID", "Breeding.line")]
)
)) %>% arrange(ID)
Tut7$row    <- (0:(nrow(Tut7)-1) %/% 8) + 1
Tut7$primer <- rep("Tut7", nrow(Tut7))
# Chunk 15
Tut4        <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("\\+", Tut4) & geno == "new")[,c("ID", "Breeding.line")]
old_Tut4    <- subset(colony, Tut4 != "todo" & IsDead == 0)[,c("ID", "Breeding.line")]
need_Tut4   <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("\\+", Tut4) & geno == "old")[,c("ID", "Breeding.line")]
old_Tut4    <- left_join(need_Tut4, old_Tut4)
Tut4        <- unique(bind_rows(samples, setdiff(Tut4, old_Tut4)  )) %>% arrange(ID)
Tut4$row    <- (0:(nrow(Tut4)-1) %/% 8) + 1
Tut4$primer <- rep("Tut4", nrow(Tut4))
rm(need_Tut4, old_Tut4)
# Chunk 16
Tuit        <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("AAD", Tut4) & geno == "new")[,c("ID", "Breeding.line")]
old_Tuit    <- subset(colony, Tut4 != "todo" & IsDead == 0)[,c("ID", "Breeding.line")]
need_Tuit   <- subset(togeno, str_count(Tut4, ",") > 1 & grepl("AAD", Tut4) & geno == "old")[,c("ID", "Breeding.line")]
old_Tuit    <- left_join(need_Tuit, old_Tuit)
Tuit        <- unique(bind_rows(samples, setdiff(Tuit, old_Tuit) )) %>% arrange(ID)
Tuit$row    <- (0:(nrow(Tuit)-1) %/% 8) + 1
Tuit$primer <- rep("Tuit", nrow(Tuit))
rm(need_Tuit, old_Tuit)
# Chunk 17
geno_table  <- bind_rows(S8, Tut4, Tut7, Tuit, ZP3)
geno_table$line   <- (0:(nrow(geno_table)-1) %/% 20) + 1
geno_table$pos    <- (0:(nrow(geno_table)-1)) - (0:(nrow(geno_table)-1) %/% 20) * 20 + 1 + ((0:(nrow(geno_table)-1) %/% 20) %% 2) * 0.5
geno_table  <- geno_table %>% select(ID, row, primer, line, pos, Breeding.line)
rm(Tuit, Tut4, Tut7, ZP3, S8, samples)
# Chunk 18
geno_animal <- unique(geno_table[,c("ID", "Breeding.line")])
geno_animal <- anti_join(geno_animal, old_geno, by="ID") %>% arrange(ID)
# Chunk 19
select(togeno, Tut4, Tut7, S8, ZP3, ID, Breeding.line, S, geno)
# Chunk 20
subset(colony, short == "todo" & IsDead == 0) %>% select(Tut4, Tut7, S8, ZP3, ID, Breeding.line, S)
# Chunk 21
as.data.frame(geno_animal)
# Chunk 22
as.data.frame(geno_table)
# Chunk 23
p <- ggplot(geno_table %>% mutate(id_primer = paste(ID, primer, row, sep="_")) %>% select(id_primer, line, pos),
aes(line, pos, label = id_primer))
#Making the plot
p <- p + geom_text(size=2) + theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
text = element_text(size=10))
show(p)
ggsave("gel_loading.pdf", p)
# Chunk 24
rm(togeno, geno_table, geno_animal, colony, p, old_geno)
# Chunk 1
library(dplyr)
library(knitr)
library(stringr)
library(ggplot2)
# Chunk 2
rm(list=ls())
# Chunk 3
colony  <- read.csv("bm_Ctrl.cKO_final_results_R.txt" , sep = ";", header = TRUE, stringsAsFactors=FALSE)
# Chunk 1
library(dplyr)
library(knitr)
# Chunk 2
rm(list=ls())
# Chunk 3
setwd("/Volumes/Promise_Pegasus/marcos_dropbox/Dropbox/Lab/Marcos_files/Organization/storage/samples_marcos")
# Chunk 4
filenames <- list.files("data/update/", pattern="*.csv", full.names=TRUE)
first_case <- TRUE
for (filename in filenames){
if (first_case){
update_storage <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
show(update_storage)
first_case <- FALSE
}
else {
update_storage_new <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
show(update_storage_new)
#update_storage <- unique(bind_rows(update_storage, update_storage_new))
}
}
# Chunk 5
write.csv2(update_storage, "views/storage.csv")
# Chunk 1
library(dplyr)
library(knitr)
# Chunk 2
rm(list=ls())
# Chunk 3
setwd("/Volumes/Promise_Pegasus/marcos_dropbox/Dropbox/Lab/Marcos_files/Organization/storage/samples_marcos")
# Chunk 4
filenames <- list.files("data/update/", pattern="*.csv", full.names=TRUE)
first_case <- TRUE
for (filename in filenames){
if (first_case){
update_storage <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage$sample       <- as.character(update_storage$sample)
update_storage$type         <- as.character(update_storage$type)
update_storage$temperature  <- as.integer(update_storage$temperature)
update_storage$place        <- as.character(update_storage$place)
update_storage$place_row    <- as.integer(update_storage$place_row)
update_storage$place_column <- as.integer(update_storage$place_column)
update_storage$place_depth  <- as.integer(update_storage$place_depth)
update_storage$box          <- as.character(update_storage$box)
update_storage$box_row      <- as.integer(update_storage$box_row)
update_storage$box_column   <- as.integer(update_storage$box_column)
update_storage$date         <- as.date(update_storage$date)
update_storage$percent_left <- as.integer(update_storage$percent_left)
show(update_storage)
first_case <- FALSE
}
else {
update_storage_new <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage_new$sample       <- as.character(update_storage_new$sample)
update_storage_new$type         <- as.character(update_storage_new$type)
update_storage_new$temperature  <- as.integer(update_storage_new$temperature)
update_storage_new$place        <- as.character(update_storage_new$place)
update_storage_new$place_row    <- as.integer(update_storage_new$place_row)
update_storage_new$place_column <- as.integer(update_storage_new$place_column)
update_storage_new$place_depth  <- as.integer(update_storage_new$place_depth)
update_storage_new$box          <- as.character(update_storage_new$box)
update_storage_new$box_row      <- as.integer(update_storage_new$box_row)
update_storage_new$box_column   <- as.integer(update_storage_new$box_column)
update_storage_new$date         <- as.date(update_storage_new$date)
update_storage_new$percent_left <- as.integer(update_storage_new$percent_left)
show(update_storage_new)
#update_storage <- unique(bind_rows(update_storage, update_storage_new))
}
}
# Chunk 5
write.csv2(update_storage, "views/storage.csv")
# Chunk 1
library(dplyr)
library(knitr)
# Chunk 2
rm(list=ls())
# Chunk 3
setwd("/Volumes/Promise_Pegasus/marcos_dropbox/Dropbox/Lab/Marcos_files/Organization/storage/samples_marcos")
# Chunk 4
filenames <- list.files("data/update/", pattern="*.csv", full.names=TRUE)
first_case <- TRUE
for (filename in filenames){
if (first_case){
update_storage <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage$sample       <- as.character(update_storage$sample)
update_storage$type         <- as.character(update_storage$type)
update_storage$temperature  <- as.integer(update_storage$temperature)
update_storage$place        <- as.character(update_storage$place)
update_storage$place_row    <- as.integer(update_storage$place_row)
update_storage$place_column <- as.integer(update_storage$place_column)
update_storage$place_depth  <- as.integer(update_storage$place_depth)
update_storage$box          <- as.character(update_storage$box)
update_storage$box_row      <- as.integer(update_storage$box_row)
update_storage$box_column   <- as.integer(update_storage$box_column)
update_storage$date         <- as.date(update_storage$date)
update_storage$percent_left <- as.integer(update_storage$percent_left)
show(update_storage)
first_case <- FALSE
}
else {
update_storage_new <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage_new$sample       <- as.character(update_storage_new$sample)
update_storage_new$type         <- as.character(update_storage_new$type)
update_storage_new$temperature  <- as.integer(update_storage_new$temperature)
update_storage_new$place        <- as.character(update_storage_new$place)
update_storage_new$place_row    <- as.integer(update_storage_new$place_row)
update_storage_new$place_column <- as.integer(update_storage_new$place_column)
update_storage_new$place_depth  <- as.integer(update_storage_new$place_depth)
update_storage_new$box          <- as.character(update_storage_new$box)
update_storage_new$box_row      <- as.integer(update_storage_new$box_row)
update_storage_new$box_column   <- as.integer(update_storage_new$box_column)
update_storage_new$date         <- as.date(update_storage_new$date)
update_storage_new$percent_left <- as.integer(update_storage_new$percent_left)
show(update_storage_new)
update_storage <- unique(bind_rows(update_storage, update_storage_new))
}
}
# Chunk 5
write.csv2(update_storage, "views/storage.csv")
# Chunk 1
library(dplyr)
library(knitr)
# Chunk 2
rm(list=ls())
# Chunk 3
setwd("/Volumes/Promise_Pegasus/marcos_dropbox/Dropbox/Lab/Marcos_files/Organization/storage/samples_marcos")
# Chunk 4
filenames <- list.files("data/update/", pattern="*.csv", full.names=TRUE)
first_case <- TRUE
for (filename in filenames){
if (first_case){
update_storage <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage$sample       <- as.character(update_storage$sample)
update_storage$type         <- as.character(update_storage$type)
update_storage$temperature  <- as.integer(update_storage$temperature)
update_storage$place        <- as.character(update_storage$place)
update_storage$place_row    <- as.integer(update_storage$place_row)
update_storage$place_column <- as.integer(update_storage$place_column)
update_storage$place_depth  <- as.integer(update_storage$place_depth)
update_storage$box          <- as.character(update_storage$box)
update_storage$box_row      <- as.integer(update_storage$box_row)
update_storage$box_column   <- as.integer(update_storage$box_column)
update_storage$date         <- as.date(update_storage$date)
update_storage$percent_left <- as.integer(update_storage$percent_left)
show(update_storage)
first_case <- FALSE
}
else {
update_storage_new <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage_new$sample       <- as.character(update_storage_new$sample)
update_storage_new$type         <- as.character(update_storage_new$type)
update_storage_new$temperature  <- as.integer(update_storage_new$temperature)
update_storage_new$place        <- as.character(update_storage_new$place)
update_storage_new$place_row    <- as.integer(update_storage_new$place_row)
update_storage_new$place_column <- as.integer(update_storage_new$place_column)
update_storage_new$place_depth  <- as.integer(update_storage_new$place_depth)
update_storage_new$box          <- as.character(update_storage_new$box)
update_storage_new$box_row      <- as.integer(update_storage_new$box_row)
update_storage_new$box_column   <- as.integer(update_storage_new$box_column)
update_storage_new$date         <- as.date(update_storage_new$date)
update_storage_new$percent_left <- as.integer(update_storage_new$percent_left)
show(update_storage_new)
update_storage <- unique(bind_rows(update_storage, update_storage_new))
}
}
# Chunk 5
write.csv2(update_storage, "views/storage.csv")
# Chunk 1
library(dplyr)
library(knitr)
# Chunk 2
rm(list=ls())
# Chunk 3
setwd("/Volumes/Promise_Pegasus/marcos_dropbox/Dropbox/Lab/Marcos_files/Organization/storage/samples_marcos")
# Chunk 4
filenames <- list.files("data/update/", pattern="*.csv", full.names=TRUE)
first_case <- TRUE
for (filename in filenames){
if (first_case){
update_storage <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage$sample       <- as.character(update_storage$sample)
update_storage$type         <- as.character(update_storage$type)
update_storage$temperature  <- as.integer(update_storage$temperature)
update_storage$place        <- as.character(update_storage$place)
update_storage$place_row    <- as.integer(update_storage$place_row)
update_storage$place_column <- as.integer(update_storage$place_column)
update_storage$place_depth  <- as.integer(update_storage$place_depth)
update_storage$box          <- as.character(update_storage$box)
update_storage$box_row      <- as.integer(update_storage$box_row)
update_storage$box_column   <- as.integer(update_storage$box_column)
update_storage$date         <- as.Date(update_storage$date)
update_storage$percent_left <- as.integer(update_storage$percent_left)
show(update_storage)
first_case <- FALSE
}
else {
update_storage_new <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage_new$sample       <- as.character(update_storage_new$sample)
update_storage_new$type         <- as.character(update_storage_new$type)
update_storage_new$temperature  <- as.integer(update_storage_new$temperature)
update_storage_new$place        <- as.character(update_storage_new$place)
update_storage_new$place_row    <- as.integer(update_storage_new$place_row)
update_storage_new$place_column <- as.integer(update_storage_new$place_column)
update_storage_new$place_depth  <- as.integer(update_storage_new$place_depth)
update_storage_new$box          <- as.character(update_storage_new$box)
update_storage_new$box_row      <- as.integer(update_storage_new$box_row)
update_storage_new$box_column   <- as.integer(update_storage_new$box_column)
update_storage_new$date         <- as.Date(update_storage_new$date)
update_storage_new$percent_left <- as.integer(update_storage_new$percent_left)
show(update_storage_new)
update_storage <- unique(bind_rows(update_storage, update_storage_new))
}
}
# Chunk 5
write.csv2(update_storage, "views/storage.csv")
View(update_storage)
# Chunk 1
library(dplyr)
library(knitr)
# Chunk 2
rm(list=ls())
# Chunk 3
setwd("/Volumes/Promise_Pegasus/marcos_dropbox/Dropbox/Lab/Marcos_files/Organization/storage/samples_marcos")
# Chunk 4
filenames <- list.files("data/update/", pattern="*.csv", full.names=TRUE)
first_case <- TRUE
for (filename in filenames){
if (first_case){
update_storage <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage$sample       <- as.character(update_storage$sample)
update_storage$type         <- as.character(update_storage$type)
update_storage$temperature  <- as.integer(update_storage$temperature)
update_storage$place        <- as.character(update_storage$place)
update_storage$place_row    <- as.integer(update_storage$place_row)
update_storage$place_column <- as.integer(update_storage$place_column)
update_storage$place_depth  <- as.integer(update_storage$place_depth)
update_storage$box          <- as.character(update_storage$box)
update_storage$box_row      <- as.integer(update_storage$box_row)
update_storage$box_column   <- as.integer(update_storage$box_column)
update_storage$date         <- as.Date(update_storage$date)
update_storage$percent_left <- as.integer(update_storage$percent_left)
show(update_storage)
first_case <- FALSE
}
else {
update_storage_new <- read.csv2(filename , sep = ";", header = TRUE, stringsAsFactors=FALSE)
update_storage_new$sample       <- as.character(update_storage_new$sample)
update_storage_new$type         <- as.character(update_storage_new$type)
update_storage_new$temperature  <- as.integer(update_storage_new$temperature)
update_storage_new$place        <- as.character(update_storage_new$place)
update_storage_new$place_row    <- as.integer(update_storage_new$place_row)
update_storage_new$place_column <- as.integer(update_storage_new$place_column)
update_storage_new$place_depth  <- as.integer(update_storage_new$place_depth)
update_storage_new$box          <- as.character(update_storage_new$box)
update_storage_new$box_row      <- as.integer(update_storage_new$box_row)
update_storage_new$box_column   <- as.integer(update_storage_new$box_column)
update_storage_new$date         <- as.Date(update_storage_new$date)
update_storage_new$percent_left <- as.integer(update_storage_new$percent_left)
show(update_storage_new)
update_storage <- unique(bind_rows(update_storage, update_storage_new))
}
}
# Chunk 5
update_storage <- update_storage %>% arrange(sample)
write.csv2(update_storage, "views/storage.csv")
View(update_storage)
